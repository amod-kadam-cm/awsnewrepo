package com.cloudmanthan.aws.awsworkshop.kms;

import java.nio.ByteBuffer;
import java.security.InvalidKeyException;
import java.security.Key;
import java.security.NoSuchAlgorithmException;
import java.util.Base64;
import java.util.logging.Logger;

import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.spec.SecretKeySpec;

import com.amazonaws.services.kms.AWSKMS;
import com.amazonaws.services.kms.AWSKMSClientBuilder;
import com.amazonaws.services.kms.model.DecryptRequest;
import com.amazonaws.services.kms.model.EncryptRequest;
import com.amazonaws.services.kms.model.GenerateDataKeyRequest;
import com.amazonaws.services.kms.model.GenerateDataKeyResult;

public class KMSDemo {

	static Logger KMSLogger = Logger.getLogger("KMSdemo");

	static AWSKMS kmsClient = AWSKMSClientBuilder.defaultClient();

	// Point to actual keyId from your account
	//static String keyId = "arn:aws:kms:ap-south-1:xxxxxxxxxxxx:key/8208d5b8-4000-45cc-8587-a64d640be2f3";
	
	static String keyId = "arn:aws:kms:ap-south-1:xyyyyyy:key/5526636a-30e2-4722-ad0f-bcea58b85963"; 

	public static void main(String[] args) throws InvalidKeyException, NoSuchAlgorithmException, NoSuchPaddingException, IllegalBlockSizeException, BadPaddingException {

		UsingCMKDemo();

		UsingDataKeyDemo();

	}

	private static void UsingDataKeyDemo() throws InvalidKeyException, NoSuchAlgorithmException, NoSuchPaddingException, IllegalBlockSizeException, BadPaddingException {

		// Prepare DataKeyRequest
		GenerateDataKeyRequest dataKeyRequest = new GenerateDataKeyRequest();
		// Specify the CMK to be used for encrypting Data Key
		//dataKeyRequest.setKeyId(keyId);
		// choose the key spec
		dataKeyRequest.setKeySpec("AES_256");

		// 1. Generate the [data encryption key]
		GenerateDataKeyResult dataKeyResult = kmsClient.generateDataKey(dataKeyRequest);

		// 2. Get the data key in plain text
		ByteBuffer plaintextKey = dataKeyResult.getPlaintext();

		// 3. Get the [encrypted data encryption key] & save it locally
		ByteBuffer encryptedKey = dataKeyResult.getCiphertextBlob();
		String plainText = "";

		// 4. Encrypt the data using plaintextKey

		// 4.1 First convert from the [ByteArray type i.e. plaintextKey] to [java.secret.Key] type
		Key jcekey = makeKey(plaintextKey);
		
		String cipherTextBase64Encoded = null ;

		cipherTextBase64Encoded = encrypt(plainText, jcekey);

		KMSLogger.info("DEK : Ciphertext is : " + cipherTextBase64Encoded);

		
		// Now get the plain text key from encryptedKey. This is typically required as generally encryption and decryption is happening
		// at two distinct processes
		// 10 - Decryption Logic
		// 10.1 - Get the [plaintextKey] from 'encryptedKey' - encrypted key is typically saved alongside the data
		DecryptRequest decreq = new DecryptRequest()
				.withCiphertextBlob(encryptedKey);
		
		ByteBuffer decryptedPlainTextKey   = kmsClient.decrypt(decreq).getPlaintext();
		
		// 10.2 - decrypt the ciphertext by using decryptedPlainTextKey
		
		String decryptedText = decrypt(cipherTextBase64Encoded,makeKey(decryptedPlainTextKey));
		
		KMSLogger.info("Decrypted Text is " + decryptedText );

	}

	private static Key makeKey(ByteBuffer plaintextKey) {

		return new SecretKeySpec(plaintextKey.array(), "AES");
	}

	private static String encrypt(String src, Key key) throws NoSuchAlgorithmException, NoSuchPaddingException,
			InvalidKeyException, IllegalBlockSizeException, BadPaddingException {

		Cipher cipher = Cipher.getInstance("AES");
		cipher.init(Cipher.ENCRYPT_MODE, key);

		byte[] enc = cipher.doFinal(src.getBytes());

		return Base64.getEncoder().encodeToString(enc);

	}

	private static String decrypt(String src, Key key) throws NoSuchAlgorithmException, NoSuchPaddingException,
			InvalidKeyException, IllegalBlockSizeException, BadPaddingException {

		byte[] decodeBase64src = Base64.getDecoder().decode(src);

		Cipher cipher = Cipher.getInstance("AES");
		cipher.init(Cipher.DECRYPT_MODE, key);
				
		byte[] enc = cipher.doFinal(decodeBase64src);
		
		return new String(enc);
	}

	private static void UsingCMKDemo() {
		String plainText = "amod.kadam";

		byte[] plainTextArray = plainText.getBytes();

		ByteBuffer plainTextBuffer = ByteBuffer.wrap(plainTextArray);

		// Encryption
		EncryptRequest req2 = new EncryptRequest().withKeyId(keyId).withPlaintext(plainTextBuffer);

		ByteBuffer ciphertextBlob = kmsClient.encrypt(req2).getCiphertextBlob();

		KMSLogger.info("CMK : ciphertextBlob : " + ciphertextBlob.array().toString());

		// Decryption
		DecryptRequest decreq = new DecryptRequest().withCiphertextBlob(ciphertextBlob);

		String keyId2 = kmsClient.decrypt(decreq).getKeyId();

		ByteBuffer decryptResultBuffer = kmsClient.decrypt(decreq).getPlaintext();

		byte[] decryptedByteArray = decryptResultBuffer.array();

		KMSLogger.info("Finally Managed to decrypt it " + new String(decryptedByteArray));

	}

}
